1. computer science: effective, but relatively poor efficiency; 
		     fixed by setting limit of nodes/sites read from inverted index 
		     and saved into partial index to 500(index elimination- top 500 Postings according to score)

2. artificial intelligence: effective and efficient

3. information systems: relatively low effectiveness but efficient;
			 created new_postings function that read/saved more than first node/site containing term 
			

4. python programming: moderate effectiveness and efficient

5. masters in computer engineering: relatively low effectiveness and relatively efficient;
				    created new_postings function that read/saved more than first node/site containing term 

6. search engine: effective and efficient

7. professor martins: relatively low effectiveness but efficient;
		      created new_postings function that read/saved more than first node/site containing term

8. database structures: moderately effective and efficient

9. binary search tree: moderate effectiveness and efficient

10. linked lists: relatively low effectiveness but efficient;
		  created new_postings function that read/saved more than first node/site containing term

11. graphical user interface: moderate effectiveness and efficient

12. the university of california, irvine: relatively low effectiveness but efficient;
					 created new_postings function that read/saved more than first node/site containing term

13. ICS Student Council: relatively low effectiveness but efficient;
			 created new_postings function that read/saved more than first node/site containing term

14. informatics academic advising: relatively low effectiveness but efficient;
			 created new_postings function that read/saved more than first node/site containing term

15. richard pattis: initially poor efficiency/effectiveness(would give indexerror); 
		    fixed by adjusting bounds of for-loop when adding Postings

16. analysis of algorithms: relatively low effectiveness but efficient;
			 created new_postings function that read/saved more than first node/site containing term

17. UCI ICS faculty: efficient and effective

18. requirements engineering: relatively low effectiveness but efficient;
			      created new_postings function that read/saved more than first node/site containing term

19. ICS scholarships: effective and efficient

20. UCI ICS undergraduate enrollment: effective and efficient


Heuristics used to improve search:
- sorted Postings related to each token from highest to lowest score
- index elimination (limited partial index to 500 highest scoring Postings per token)
- use positions
- weighted scores according to bolding/heading